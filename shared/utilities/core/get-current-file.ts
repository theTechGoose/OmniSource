import { nanoid } from "npm:nanoid@5.0.7";
import { fileURLToPath } from "node:url";

/**
 * THis is a hack to get the current file path from a stack trace.
 * the key is that it can be used inside a function and it will give you the __dirname of the file that called it.
 * the stack trace is generated by creating an error and then reading the stack property
 */
export function getStackTrace(): FileStack {
  const err = new Error(nanoid());
  const input = err.stack;
  if (!input) return new FileStack();
  return new FileStack(input);
}

/**
 * A utility class for working with file stack traces. Provides methods to extract,
 * manipulate, and format file stack trace entries.
 */
class FileStack {
  /**
   * A regular expression to match file URLs with line and column numbers in a stack trace.
   */
  regex = /file:\/\/[^\s)]+:\d+:\d+/g;

  /**
   * Returns all matched file stack entries in reverse order.
   * @returns {string[]} An array of matched stack entries, reversed.
   */
  get matches(): string[] {
    const output = this.stack.match(this.regex);
    if (!output) return [];
    return Array.from(output).reverse();
  }

  /**
   * Creates an instance of FileStack.
   * @param {string} [stack=''] - The stack trace as a string.
   */
  constructor(private stack: string = "") {}

  /**
   * Gets the first matched stack entry, formatted as specified.
   * @param {pathFmt} fmt - The format of the returned path (`'url'`, `'path'`, `'scrubbed:path'`, or `'scrubbed:url'`).
   * @returns {string | undefined} The first matched stack entry in the specified format.
   */
  getFirst(fmt: pathFmt): string | undefined {
    const matches = this.matches;
    if (!matches) return ;
    return this.getAtInx(0, fmt);
  }

  /**
   * Gets the last matched stack entry, formatted as specified.
   * @param {pathFmt} fmt - The format of the returned path (`'url'`, `'path'`, `'scrubbed:path'`, or `'scrubbed:url'`).
   * @returns {string | undefined} The last matched stack entry in the specified format.
   */
  getLast(fmt: pathFmt): string | undefined {
    const matches = this.matches;
    if (!matches) return;
    return this.getAtInx(-1, fmt);
  }

  /**
   * Gets a stack entry at a specific index, formatted as specified.
   * @param {number} _index - The index of the stack entry (negative values count from the end).
   * @param {pathFmt} [fmt] - The format of the returned path (`'url'`, `'path'`, `'scrubbed:path'`, or `'scrubbed:url'`).
   * @returns {string | undefined} The stack entry at the specified index in the specified format.
   */
  getAtInx(_index: number, fmt?: pathFmt): string | undefined {
    let matches = this.matches;
    if (!matches) return;
    const isNeg = _index < 0;
    if (isNeg) matches = matches.reverse();
    const index = Math.abs(_index);
    const unformatted = this.matches[index];
    if (!fmt || fmt === "url") return unformatted;
    const path = this.urlToPath(unformatted);
    if (fmt === "path") return path;
    if (fmt === "scrubbed:path") return this.scrubPath(path);
    if (fmt === "scrubbed:url") return this.scrubPath(unformatted);
  }

  /**
   * Converts a file URL to a file system path.
   * @private
   * @param {string} url - The file URL to convert.
   * @returns {string} The corresponding file system path.
   */
  private urlToPath(url: string): string {
    return fileURLToPath(url);
  }

  /**
   * Scrubs sensitive information from a file path.
   * @private
   * @param {string} p - The file path to scrub.
   * @returns {string} The scrubbed file path.
   */
  private scrubPath(p: string): string {
    return p.split(":").slice(0, -2).join("");
  }
}

/**
 * The format of the returned path.
 */
type pathFmt = "path" | "url" | "scrubbed:path" | "scrubbed:url";
